#compdef stack

# Copyright (c) 2018 Github cyberfined - https://github.com/cyberfined
# License - GPLv3
# stack autocompletion for zsh

local -a arguments=(
    "--help[Show help text]"
    "--version[Show version]"
    "--numeric-version[Show only version number]"
    "--hpack-numeric-version[Show only hpack's version number]"
    "(--verbosity --silent -v --verbose)--verbosity:mode:(silent error warn info debug)"
    "(--verbosity --silent)"{--verbose,-v}"[Enable verbose mode]"
    "(--verbosity -v --verbose)--silent[Enable silent mode]"
    "(--no-time-in-log)--time-in-log[Enable inclusion of timings in logs]"
    "(--time-in-log)--no-time-in-log[Disable inclusion of timings in logs]"
    "--stack-root[Absolute path to the global stack root directory]:directory:_directories"
    "--work-dir[Relative path of work directory]:directory:_directories"
    "(--no-system-ghc)--system-ghc[Enable using the system installed GHC]"
    "(--system-ghc)--no-system-ghc[Disable using the system installed GHC]"
    "(--no-install-ghc)--install-ghc[Enable downloading and installing GHC if necessary]"
    "(--install-ghc)--no-install-ghc[Disable downloading and installing GHC if necessary]"
    "--arch[System architecture]"
    "--ghc-variant[Specialized GHC variant]"
    "--ghc-build[Specialized GHC build]"
    "(--jobs -j)"{--jobs,-j}"[Number of concurrent jobs to run]"
    "*--extra-include-dirs[Extra directories to check for C header files]:directory:_directories"
    "*--extra-lib-dirs[Extra directories to check for libraries]:directory:_directories"
    "--with-gcc[Path to gcc]:file:_files"
    "--with-hpack[Path to hpack]:file:_files"
    "(--no-skip-ghc-check)--skip-ghc-check[Enable skipping the GHC version and architecture check]"
    "(--skip-ghc-check)--no-skip-ghc-check[Disable skipping the GHC version and architecture check]"
    "(--no-skip-msys)--skip-msys[Enable skipping the local MSYS installation]"
    "(--skip-msys)--no-skip-msys[Disable skipping the local MSYS installation]"
    "--local-bin-path[Install binaries to DIR]:directory:_directories"
    "(--no-modify-code-page)--modify-code-page[Enable setting the codepage to support UTF-8]"
    "(--modify-code-page)--no-modify-code-page[Disable setting the codepage to support UTF-8]"
    "(--no-allow-different-user)--allow-different-user[Enable permission for users to use a stack installation]"
    "(--allow-different-user)--no-allow-different-user[Disable permission for users to use a stack installation]"
    "(--no-dump-logs)--dump-logs[Enable dump the build logs to console]"
    "(--dump-logs)--no-dump-logs[Disable dump the build logs to console]"
    "--resolver[Override resolver in project file]"
    "--compiler[Use the specified compiler]"
    "(--no-terminal)--terminal[Enable overriding terminal detection]"
    "(--terminal)--no-terminal[Disable overriding terminal detection]"
    "--color[Specify when to use color in output]:mode:(always never auto)"
    "--terminal-width[Specify the width of the terminal]"
    "--stack-yaml[Override project stack.yaml file]"
    "*: :__stack_modes"
)

local -a subcmds=(
    "subcommand"
    "build[Build the package(s) in this directory/configuration]"
    "install[Shortcut for build --copy-bins]"
    "test[Shortcut for build --test]"
    "bench[Shortcut for build --bench]"
    "haddock[Shortcut for build --haddock]"
    "new[Create a new project from a template]"
    "templates[List the templates]"
    "init[Create stack project config]"
    "solver[Add missing extra-deps to stack project config]"
    "setup[Get the appropriate GHC for your project]"
    "path[Print out handy path information]"
    "ls[List command]"
    "unpack[Unpack one or more packages locally]"
    "update[Update the package index]"
    "upgrade[Upgrade to the latest stack]"
    "upload[Upload a package to Hackage]"
    "sdist[Create source distribution tarballs]"
    "dot[Visualize your project's dependency graph using]"
    "ghc[Run ghc]"
    "hoogle[Run hoogle]"
    "exec[Execute a command]"
    "ghci[Run ghci]"
    "repl[Run ghci]"
    "runghc[Run runghc]"
    "runhaskell[Run runghc]"
    "script[Run a Stack Script]"
    "eval[Evaluate some haskell code inline]"
    "clean[Clean the local packages]"
    "list-dependencies[List the dependencies]"
    "query[Query general build information]"
    "ide[IDE-specific commands]"
    "docker[Subcommands specific to Docker use]"
    "config[Subcommands specific to modifying stack.yaml files]"
    "image[Subcommands specific to imaging]"
    "hpc[Subcommands specific to Haskell Program Coverage]"
)

__stack_modes() {
    _values $subcmds[@]
}

_arguments -S -s $arguments[@]
